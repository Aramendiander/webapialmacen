Creamos carpeta Calculos y dentro la clase ClaseCalculos

ClaseCalculos

 public class ClaseCalculos
 {
     public ClaseCalculos() { }
     public char LetraDNI(int dni)
     {
         int resto = dni % 23;
         string letras = "TRWAGMYFPDXBNJZSQVHLCKE";
         var letra = letras[resto];
         return letra;
     }

     public decimal ImporteNetoFactura(decimal importe)
     {
         if (importe < 0)
         {
             throw new Exception("Importe erróneo");
         }
         else if (importe > 1000)
         {
             return importe - (importe * 10 / 100);
         }
         else
         {
             return importe;
         }
     }
 }


Probamos la clase en el Program

using TestingASP.Calculos;

var misCalculos = new ClaseCalculos();

Console.WriteLine(misCalculos.LetraDNI(33420108));
Console.WriteLine(misCalculos.ImporteNetoFactura(2000));

Agregar proyecto de tipo MSTest a la solución con el nombre TestingASP.Tests
En este proyecto, creamos carpeta Calculos y dentro la clase ClaseCalculosTests
ClaseCalculosTests

 [TestClass()]
 public class ClaseCalculosTests
 {
     [TestMethod()]
     public void LetraDNITest()
     {
         var calculos = new ClaseCalculos();
         var letra = calculos.LetraDNI(33420108);
         Assert.AreEqual(letra, 'G');
     }

     [TestMethod]
     [ExpectedException(typeof(Exception))]
     public void ImporteFacturaNegativoError()
     {
         var calculos = new ClaseCalculos();
         var importe = calculos.ImporteNetoFactura(-1500);
     }

     [TestMethod()]
     public void ImporteNetoFacturaTest()
     {
         decimal importe;
         var calculos = new ClaseCalculos();
         importe = calculos.ImporteNetoFactura(1500);
         Assert.AreEqual(importe, 1350);
         importe = calculos.ImporteNetoFactura(500);
         Assert.AreEqual(importe, 500);
     }
 }

En el proyecto TestingASP.Tests agregar una referencia de proyecto al proyecto TestingASP
Pulsar botón derecho en Dependencias y elegir referencia de proyecto

En el proyecto TestingASP creamos la carpeta listas. Dentro creamos la clase ListaPersonas
ListaPersonas.cs

public class Persona
    {
        public string Nombre { get; set; }
        public int Edad { get; set; }
        public DateTime FechaIngresoALaEmpresa { get; set; }
        public bool Soltero { get; set; }
    }
    public class ListaPersonas
    {
        private List<Persona> _personas { get; set; }
        public ListaPersonas(List<Persona> personas)
        {
            _personas = personas;
        }

        public List<Persona> Solteros()
        {
            return _personas.Where(x => x.Soltero).ToList();
        }

        public Persona PersonaMayor ()
        {
            return _personas.MaxBy(x => x.Edad);
        }

        public bool TodosMayoresEdad()
        {
            return _personas.All(x => x.Edad>=18);
        }

        public bool TodosMayoresOIgualesDeUnaEdad(int edad)
        {
            return _personas.All(x => x.Edad >= edad);
        }
    }

Probamos la clase en el program (así queda completo)

// See https://aka.ms/new-console-template for more information
using TestingASP.Calculos;
using TestingASP.Listas;

var misCalculos = new ClaseCalculos();

Console.WriteLine(misCalculos.LetraDNI(33420108));
Console.WriteLine(misCalculos.ImporteNetoFactura(2000));

var persona1 = new Persona();
persona1.Nombre = "Julián";
persona1.Edad = 60;
persona1.Soltero = true;
persona1.FechaIngresoALaEmpresa = DateTime.Now;

var persona2 = new Persona();
persona2.Nombre = "Julio";
persona2.Edad = 50;
persona2.Soltero = false;
persona2.FechaIngresoALaEmpresa = DateTime.Now.AddYears(-2);

var lista = new List<Persona>();
lista.Add(persona1);
lista.Add(persona2);

var miLista = new ListaPersonas(lista);
Console.WriteLine(miLista.Solteros());
Console.WriteLine(miLista.TodosMayoresEdad());
Console.WriteLine(miLista.TodosMayoresOIgualesDeUnaEdad(55));
Console.WriteLine(miLista.PersonaMayor().Nombre);

En el proyecto TestingASP.Tests creamos la clase ListaPersonasTests.cs

ListaPersonasTests.cs

 [TestClass()]
    public class ListaPersonasTests
    {
        List<Persona> _personas = new List<Persona>() {
               new Persona { Nombre = "Eduardo", Edad = 30, FechaIngresoALaEmpresa = new DateTime(2021, 1, 2), Soltero = true },
               new Persona { Nombre = "Juan Luis", Edad = 19, FechaIngresoALaEmpresa = new DateTime(2015, 11, 22), Soltero = true },
               new Persona { Nombre = "Ana", Edad = 45, FechaIngresoALaEmpresa = new DateTime(2020, 4, 12), Soltero = false },
               new Persona { Nombre = "Marta", Edad = 24, FechaIngresoALaEmpresa = new DateTime(2021, 7, 8), Soltero = false },
               new Persona { Nombre = "Susana", Edad = 61, FechaIngresoALaEmpresa = DateTime.Now.AddDays(-1), Soltero = false },
        };

        private ListaPersonas _listaPersonas;

        [TestInitialize]
        public void Setup()
        {
            _listaPersonas = new ListaPersonas(_personas);
        }

        [TestMethod()]
        public void SolterosTest()
        {
            Assert.AreEqual(_listaPersonas.Solteros().Count, 2);
        }

        [TestMethod()]
        public void PersonaMayorTest()
        {
            Assert.AreEqual(_listaPersonas.PersonaMayor().Nombre, "Susana");
        }

        [TestMethod()]
        public void TodosMayoresEdadTest()
        {
            Assert.IsTrue(_listaPersonas.TodosMayoresEdad());
        }

        [TestMethod()]
        public void TodosMayoresDeUnaEdadTest()
        {
            Assert.IsFalse(_listaPersonas.TodosMayoresOIgualesDeUnaEdad(50));
        }
    }







