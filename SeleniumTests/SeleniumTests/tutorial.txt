Creamos proyecto de tipo Proyecto de prueba NUnit con el nombre SeleniumTests

Agregamos los paquetes Nuget Selenium.WebDriver, Selenium.WebDriverManager, SeleniumExtras.WaitHelpers, ExtentReports y Selenium.Support

Creamos carpeta TestE2E y dentro, creamos la clase Browser

Browser.cs

 public class Browser
    {
        public IWebDriver driver;
        public ExtentReports extent;
        public ExtentTest test;

        [OneTimeSetUp]
        public void Setup()
        {
            string workingDirectory = Environment.CurrentDirectory;
            string projectDirectory = Directory.GetParent(workingDirectory).Parent.Parent.FullName;
            string reportPath = projectDirectory + "//index.html";
            var htmlReporter = new ExtentHtmlReporter(reportPath);
            extent = new ExtentReports();
            extent.AttachReporter(htmlReporter);
            extent.AddSystemInfo("Host Name", "localhost");
            extent.AddSystemInfo("Environment", "QA");
            extent.AddSystemInfo("Username", "Juan Luis");
        }

        [SetUp]
        public void StartBrowser()
        {
            test = extent.CreateTest(TestContext.CurrentContext.Test.Name);

            InitBrowser("Chrome");

            // La espera implícita en Selenium se usa para decirle al controlador web que espere una cierta cantidad de tiempo antes de que arroje una
            // excepción si un elemento no está. También se pueden configurar tiempos de espera explícitos
            // que pausen la prueba y se reanude cuando un elemento cumpla una condición
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

            driver.Manage().Window.Maximize();
            driver.Url = "http://localhost:4200/login";
        }

        public void InitBrowser(string browserName)
        {
            switch (browserName)
            {
                case "Firefox":
                    new WebDriverManager.DriverManager().SetUpDriver(new FirefoxConfig());
                    driver = new FirefoxDriver();
                    break;
                case "Chrome":
                    new WebDriverManager.DriverManager().SetUpDriver(new ChromeConfig());
                    driver = new ChromeDriver();
                    break;
                case "Edge":
                    new WebDriverManager.DriverManager().SetUpDriver(new EdgeConfig());
                    driver = new EdgeDriver();
                    break;
            }
        }

        [TearDown]
        public void EndTest()
        {
            var status = TestContext.CurrentContext.Result.Outcome.Status;
            var stackTrace = TestContext.CurrentContext.Result.StackTrace;

            DateTime time = DateTime.Now;
            string fileName = "Screenshot_" + time.ToString("h_mm_ss") + ".png";

            if (status == TestStatus.Failed)
            {
                test.Log(Status.Fail, "Test fallido: " + stackTrace);
                test.Fail("Test fallido", captureScreenShot(driver, fileName));
                test.Fail("Test fallido");
            }

            extent.Flush();
            driver.Dispose();
        }

        public MediaEntityModelProvider captureScreenShot(IWebDriver driver, string screenShotName)
        {
            ITakesScreenshot ts = (ITakesScreenshot)driver;
            var screenshot = ts.GetScreenshot().AsBase64EncodedString;

            return MediaEntityBuilder.CreateScreenCaptureFromBase64String(screenshot, screenShotName).Build();
        }

        public IWebDriver getDriver()
        {
            return driver;
        }
    }

    Dentro de E2E creamos la carpeta Pages para ir codificando el contenido de las páginas a probar
    Dentro de Pages, creamos las clases LoginPage y FamiliasPage

    LoginPage

      public class LoginPage
    {
        private IWebDriver driver;

        public LoginPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Id, Using = "email")]
        private IWebElement email;

        [FindsBy(How = How.Name, Using = "password")]
        private IWebElement password;

        [FindsBy(How = How.Id, Using = "login1")]
        private IWebElement loginButton;

        public IWebElement getEmail()
        {
            return email;
        }

        public IWebElement getPassword()
        {
            return password;
        }

        public FamiliasPage validLogin(string user, string pass)
        {
            email.SendKeys(user);
            password.SendKeys(pass);
            loginButton.Click();
            return new FamiliasPage(driver);
        }
    }


FamiliasPage

    public class FamiliasPage
    {
        private IWebDriver driver;

        public FamiliasPage(IWebDriver driver)
        {
            this.driver = driver;
            PageFactory.InitElements(driver, this);
        }
        // Elementos de la página

        [FindsBy(How = How.Id, Using = "nombre")]
        private IWebElement nombre;

        [FindsBy(How = How.Id, Using = "aceptar")]
        private IWebElement aceptarButton;
        
        public IWebElement getNombre()
        {
            return nombre;
        }


        public void agregarFamilia(string nombreFamilia)
        {
            nombre.SendKeys(nombreFamilia);
            aceptarButton.Click();
        }
    }

Ahora creamos la clase Tester en E2E

Tester.cs

    public class Tester : Browser
    {
        [Test]
        public void Test()
        {
            LoginPage loginPage = new LoginPage(getDriver());
            loginPage.getEmail().Clear();
            loginPage.getPassword().Clear();
            //loginPage.getUsuario().SendKeys("jl@gmail.com");
            //loginPage.getPassword().SendKeys("123456");
            var familiasPage = loginPage.validLogin("jl@gmail.com", "123456");
            familiasPage.getNombre().Clear();
            familiasPage.agregarFamilia("Tablets");
        }

    }

Pulsamos en Tester con el botón derecho y Ejecutar pruebas. El navegador se abre y nuestro programa interactúa con él.
Al final, sale un archivo index.html con un informe del test


