Creamos la aplicación Angular para test

ng new testing

Damos sentido con comentarios al test que aparece por defecto en el componente app.component

app.component.spec.ts

import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

// describe marca el comienzo de la prueba. 'AppComponent' es el título de la prueba
describe('AppComponent', () => {
  // TestBed onfigura e inicializa el entorno para pruebas unitarias y proporciona métodos para crear componentes y servicios en pruebas unitarias.
  // El método TestBed.configureTestingModule() crea el módulo de pruebas con los componentes que va a probar
  beforeEach(() =>
    TestBed.configureTestingModule({
      declarations: [AppComponent]
    })
  );

  // Cada it es una prueb unitaria. 'should create the app' es el nombre de la prueba
  it('should create the app', () => {
    // fixture es la pieza (componente) que se va a probar
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    // Se expera (expect) que el componente (app-->AppComponent) se haya creado toBeTruthy
    expect(app).toBeTruthy();
  });

  it(`should have as title 'Testing'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    // Se expera (expect) que el componente (app-->AppComponent) tenga una propiedad titulo con el valor 'pruebas'
    expect(app.title).toEqual('Testing');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    // Se activa el detector de cambios
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    // Se expera (expect) que en el componente (app-->AppComponent) haya un elemento de cclase content span con el valor 'pruebas app is running!
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, Testing');
  });
});

ng test

TEST UNITARIOS SENCILLOS

Creamos carpeta unitarios. Dentro de unitarios creamos la carpeta string. Dentro de string, creamos string.ts y string.spec.ts


string.ts

export function mensaje(nombre: string) {
  return `Saludos ${nombre}`;
}

string.spec.ts

import { mensaje } from './string';

// describe agrupa pruebas,
// El primer argumento es el nombre del grupo y el segundo la función que agrupa las pruebas
describe('Pruebas de strings', () => {
  // El primer argumento es el nombre de la prueba y el segundo la función que efectua la prueba
  it('Debe de retornar un string', () => {
    // La prueba espera (expect) sea (toBe) un string
    const resp = mensaje('Juan Luis');
    expect(typeof resp).toBe('string');
  });

  it('Debe de retornar un saludo con el nombre enviado', () => {
    const nombre = 'Juan Luis';
    const resp = mensaje(nombre);

    expect(resp).toContain(nombre);
  });
});


Creamos la carpeta numeros dentro de unitarios. Dentro de numeros, creamos numeros.ts y numeros.spec.ts

numeros.ts

export function incrementar(numero: number) {
  if (numero > 100) {
    return 100;
  } else {
    return numero + 1;
  }
}

numeros.spec.ts

import { incrementar } from './numeros';

describe('Pruebas de números', () => {
  it('Debe de retornar 100 si el número ingresado es mayor a 100', () => {
    const res = incrementar(300);
    expect(res).toBe(100);
  });

  it('Debe de retornar el número ingresado + 1 si no es mayor a 100', () => {
    const res = incrementar(50);
    expect(res).toBe(51);
  });
});

Creamos la carpeta clases dentro de unitarios. Dentro de clase, creamos clase.ts y clase.spec.ts

clases.ts

export class Jugador {
  puntos: number;

  constructor() {
    this.puntos = 100;
  }

  restarPuntos(puntos: number) {
    if (puntos >= this.puntos) {
      this.puntos = 0;
    } else {
      this.puntos = this.puntos - puntos;
    }

    return this.puntos;
  }
}

clases.spec.ts

import { Jugador } from './clases';

describe('Pruebas de clase', () => {
  let jugador: Jugador;

  // Ciclo de vida de las pruebas
  // Al iniciar las pruebas
  beforeAll(() => {
    console.warn('BeforeAll');
    // jugador.puntos = 100;
  });

  // Al principio de cada prueba
  beforeEach(() => {
    // console.warn('BeforeEach');
    // jugador.puntos = 100;
    jugador = new Jugador();
  });

  // Después de todas las pruebas
  afterAll(() => {
    // console.warn('AfterAll');
  });

  // Después de cada prueba
  afterEach(() => {
    // console.warn('AfterEach');
    // jugador.puntos = 100;
  });

  it('Debe de retornar 80 puntos si se restan 20', () => {
    // const jugador = new Jugador();
    const resp = jugador.restarPuntos(20);

    expect(resp).toBe(80);
  });

  it('Debe de retornar 50 puntos si se restan 50', () => {
    // const jugador = new Jugador();
    const resp = jugador.restarPuntos(50);

    expect(resp).toBe(50);
  });

  it('Debe de retornar 0 puntos si se restan 100 o más', () => {
    // const jugador = new Jugador();
    const resp = jugador.restarPuntos(100);

    expect(resp).toBe(0);
  });
});



TEST DE INTEGRACIÓN

Creamos carpeta integracion y componente contador
ng g c integracion/contador

Desarrollamos el componente contador

contador.component.html

<h2>{{numero}}</h2>
<button (click)="setContador(1)">+1</button>
<button (click)="setContador(-1)">-1</button>

<input type="number" name="numero" [(ngModel)]="numero" />


contador.component.ts

import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-contador',
  templateUrl: './contador.component.html',
  styleUrls: ['./contador.component.css']
})
export class ContadorComponent implements OnInit {
  @Input() numero: number = 0;

  constructor() {}

  ngOnInit() {}

  setContador(valor: number) {
    this.numero += valor;
  }
}


app.module.ts

Agregamos FormsModule en imports


app.component.html (anulamos los tests de app.component.spec.ts)

<h1>Contador</h1>
<app-contador></app-contador>
<hr/>



contador.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { By } from '@angular/platform-browser';

import { ContadorComponent } from './contador.component';

describe('ContadorComponent', () => {
  let component: ContadorComponent;
  let fixture: ComponentFixture<ContadorComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FormsModule],
      declarations: [ContadorComponent]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ContadorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('Debe mostrar el numero', () => {
    component.numero = 8;
    fixture.detectChanges();
    const h2: HTMLElement = fixture.debugElement.query(By.css('h2')).nativeElement;

    expect(h2.innerHTML).toContain('8');
  });

  it('Debe mostrar el numero que aparece en el h2 cuando varía mediante setContador', () => {
    component.setContador(1);
    fixture.detectChanges();

    const h2: HTMLElement = fixture.debugElement.query(By.css('h2')).nativeElement;
    expect(h2.innerHTML).toContain('1');
  });

  it('Debe incrementar el numero que aparece en el input cuando se produce el click en el botón +1', () => {
    const botones = fixture.debugElement.queryAll(By.css('button'));
    const input: HTMLInputElement = fixture.debugElement.query(By.css('input')).nativeElement;

    // El primer botón es el +1
    botones[0].triggerEventHandler('click', null); //null es porque no enviamos argumentos al click
    fixture.detectChanges();
    // whenStable se asegura de que el ciclo de cambios ha concluído. En este caso funciona sin la función también, pero puede que a veces el test (expect) se ejecute antes de que haya terminado el ciclo de detección de cambios
    fixture.whenStable().then(() => {
      expect(input.value).toContain('1');
    });
  });
});


Nuevo componente y nuevo servicio para hacer prueba de integración

ng g c integracion/githubUsers
ng g s integracion/githubUsers

GithubUsersService.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class GithubUsersService {
  constructor(private http: HttpClient) {}

  getUsers(): Observable<any> {
    return this.http.get('https://api.github.com/users');
  }
}

Desarrollamos el componente

github-users.component.ts

import { Component, OnInit } from '@angular/core';
import { GithubUsersService } from '../github-users.service';

@Component({
  selector: 'app-github-users',
  templateUrl: './github-users.component.html',
  styleUrls: ['./github-users.component.css']
})
export class GithubUsersComponent implements OnInit {
  users: any[]=[];

  constructor(private service: GithubUsersService) {}

  ngOnInit() {
    this.getUsers();
  }

  getUsers() {
    this.service.getUsers().subscribe((users) => (this.users = users));
  }
}

github-users.component.html

<p *ngFor="let user of users">{{user.login}}</p>

app.component.html

<h1>Usuarios de Github</h1>
<app-github-users></app-github-users>
<hr>

app.module.ts

Incluir el httpclientmodule

Desarrollamos el test de prueba del servicio
github-users.service.spec.ts

import { TestBed } from '@angular/core/testing';
import { HttpClientModule } from '@angular/common/http';
import { GithubUsersService } from './github-users.service';

describe('GithubUsersService ', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientModule],
      providers: [GithubUsersService]
    });
  });

  it('servicio creado', () => {
    const service: GithubUsersService = TestBed.inject(GithubUsersService );
    expect(service).toBeTruthy();
  });

  it('petición get exitosa', () => {
    const service: GithubUsersService = TestBed.inject(GithubUsersService );
    service.getUsers().subscribe({
      next: (response) => {
        expect(response).not.toBeNull();
      },
      error: (error) => fail(error)
    });
  });
});

Creamos en integración el archivo users.class.ts para desarrollar el mock que va a sustituir el servicio en el test del componente

import { Observable, of } from 'rxjs';

const users = [
  {
    login: 'mojombo',
    id: 1,
    node_id: 'MDQ6VXNlcjE=',
    avatar_url: 'https://avatars.githubusercontent.com/u/1?v=4',
    gravatar_id: '',
    url: 'https://api.github.com/users/mojombo',
    html_url: 'https://github.com/mojombo',
    followers_url: 'https://api.github.com/users/mojombo/followers',
    following_url: 'https://api.github.com/users/mojombo/following{/other_user}',
    gists_url: 'https://api.github.com/users/mojombo/gists{/gist_id}',
    starred_url: 'https://api.github.com/users/mojombo/starred{/owner}{/repo}',
    subscriptions_url: 'https://api.github.com/users/mojombo/subscriptions',
    organizations_url: 'https://api.github.com/users/mojombo/orgs',
    repos_url: 'https://api.github.com/users/mojombo/repos',
    events_url: 'https://api.github.com/users/mojombo/events{/privacy}',
    received_events_url: 'https://api.github.com/users/mojombo/received_events',
    type: 'User',
    site_admin: false
  }
];

export class MockUsers {
  public getUsers(): Observable<any> {
    return of(users);
  }
}

Y desarrollamos el test en el componente

github-users.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { GithubUsersComponent } from './github-users.component';
import { MockUsers } from '../users.class';
import { GithubUsersService } from '../github-users.service';

describe('GithubUsersComponent', () => {
  let component: GithubUsersComponent ;
  let fixture: ComponentFixture<GithubUsersComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [GithubUsersComponent],
      providers: [
        {
          provide: GithubUsersService,
          useClass: MockUsers
        }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(GithubUsersComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('debe crearse el componente', () => {
    expect(component).toBeTruthy();
  });

  it('debe cargarse un usuario', () => {
    component.getUsers();
    fixture.detectChanges();
    expect(component.users[0].login).toEqual('mojombo');
  });
});
