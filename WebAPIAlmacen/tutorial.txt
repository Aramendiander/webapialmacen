Crear proyecto

Elegir plantilla de proyecto Webapi, dar un nombre al proyecto y dejar las opciones por defecto.
Eliminar el archivo WeatherForecast.cs y el controller WeatherForecastController

Crear la base de datos MiAlmacen con estos scripts
CREATE TABLE Familias (
  Id              INT           NOT NULL    IDENTITY    PRIMARY KEY,
  Nombre           NVARCHAR(100)  NOT NULL
);

CREATE TABLE Productos (
    Id              INT           NOT NULL    IDENTITY    PRIMARY KEY,
    Nombre        NVARCHAR (150) NOT NULL,
    Precio        DECIMAL (9, 2) NOT NULL,
    FechaAlta     DATE           NULL,
    Descatalogado BIT            NOT NULL,
    FotoURL       NVARCHAR (MAX) NULL,
    FamiliaId     INT            NOT NULL,
    CONSTRAINT FK_Familias_Productos FOREIGN KEY (FamiliaId) REFERENCES Familias (Id)
);

Agregar los paquetes necesarios a la aplicación desde Herramientas, Administrador de paquetes Nuget.
Instalar estos paquetes:
Microsoft.EntityFrameworkCore.SqlServer 
Microsoft.EntityFrameworkCore.Tools 

-----------------------------------------------------------------------------------------------------------
Crear los modelos mediante Scaffold
Ejecutar el siguiente comando desde la consola de paquetes Nuget
Scaffold-DbContext "Data Source=localhost;Initial Catalog=MiAlmacen;Integrated Security=True;TrustServerCertificate=true" -Provider Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -force -project WebAPIAlmacen

Debemos sustituir el valor de Data Source por la configuración de nuestro servidor
Al ejecutarse el comando se crea la carpeta Models con los modelos de datos y MiAlmacenContext con la configuración y estructura de la base de datos
-----------------------------------------------------------------------------------------------------------
Crear controller de Familias

En el archivo appsettings.development.json ponemos la cadena de conexión de la base de datos
En el program registramos la conexión leyendo la cadena de conexión anterior y creando un context que pueda inyectarse
en otras clases, normalmente controllers y/o servicios
Creamos el controller de familias en la carpeta controller. Es MUY IMPORTANTE que cada controller tenga el sufijo controller
En cada controller, inyectamos como dependencia el context (MiAlmacenContext) para poder utilizar la base de datos
-----------------------------------------------------------------------------------------------------------
Desarrollar controller de Familias

Cada punto de acceso del controller:
    Es un método debe ir precedido de el tipo de petición (Get, Post, Put o Delete habitualmente)
    Debe ser asíncrono async Task y preferiblemete devolver un ActionResult para, además de la información, devolver el código de retorno,
    por ejemplo, un Ok 200 cuando va todo bien o un Bad Request 400 cuando hay algún fallo
    Al ser asíncrono, cada operación del context debe precederse por un await e incluir un método que contenga Async
    Cada uno de los puntos de acceso debe tener una ruta diferente (por ejemplo, no puede haber dos [HttpGet], el segundo incluiría una ruta)
    También puede haber argumentos. Estos argumentos son los que el punto de acceso necesitará para programar su lógica
    Estos argumentos van entre paréntesis junto al nombre del método y deben coincidir en su nombre con los argumentos expuestos en la ruta
    Por defecto, los argumentos se toman de la ruta ([FromRoute]). Si viene con sintaxis querystring van con [FromQuery] y si
    vienen con archivos con [FromForm]

    Opcionalmente, podemos tener en cuenta ajustar el tracking en la aplicación. Para ello, en el Program debemos deshabilitarlo
    y en los controladores, activar el tracking en las operaciones necesarias (modificaciones de datos)

------------------------------------------------------------------------------------------------------------
Servicios
Un servicio centraliza operaciones que de forma reiterada vamos a necesitar en el proyecto
Lo habitual es crear una carpeta Services e ir creando los servicios dentro
Cada servicio es una clase autónoma en cuyo constructor se registran las dependencias que necesita
Una vez desarrollado, se registra en el program. Después, en los controllers donde se usa se debe inyectar como
dependencia de la misma manera que lo hacemos con el context

------------------------------------------------------------------------------------------------------------
Servicios con interfaces

Como buena práctica, se pueden crear interfaces como especificaciones para los servicios. Si hacemos esto,
en el program el servicio se debe registrar a partir de la interface y en cada controller el servicio se debe
registrar haciendo referencia a la interface

------------------------------------------------------------------------------------------------------------
Servicios para tareas programadas
Estos servicios son Singleton porque solo se ejecuta una instancia de estos en el servidor. Para desarrollar
este tipo de servicios, estas clases deben heredar de IHostedService y en el program se deben registrar mediante
el método AddHostedService

Estos servicios se construyen siempre igual, siendo el método StartAsync el que se ejecuta de forma automática al
iniciarse el servicio y el StopAsync el que se ejecuta al finalizar el servicio. En ambos métodos programaríamos la
lógica del servicio

------------------------------------------------------------------------------------------------------------
Middlewares

Los Middlewares son procesos que se ejecutan uno tras otro tras llegar una petición al servidor. Los distinguimos en el program
por su prefijo use. Muchos tienen lógica ya predefinida y otros los podemos desarrollar nosotros.
Cuando necesitamos desarrollar uno, creamos una clase en una ubicación, habitualmente una carpeta Middlewares, inyectamos
como dependencia de la clase RequestDelegate e incluimos el método InvokeAsync. Este método ya viene con la información de la 
petición (HttpContext). Dentro del InvokeAsync programamos la lógica del Middleware. Podemos analizar, rechazar e incluso
transformar una petición. Si decidimos que la petición debe continuar, especificamos que debe proseguir con el siguiente
middleware (next(httpContext))

------------------------------------------------------------------------------------------------------------
Filtros

Los filtros son procesos que se ejecutan tras los middlewares. Pueden servir, por ejemplo, como filtros de autorización 
para examinar si un usuario puede acceder a determinados puntos de acceso. También nos pueden servir para controlar
de forma global excepciones. Este es el llamado filtro de excepción. Los filtros son clases que suelen ir en una carpeta Filters
El filtro de excepción es una clase que hereda de ExceptionFilterAttribute. El método OnException viene ya con la información de la excepción.
Será en este método donde programemos la respuesta común a todas las excepciones.
En el program, los filtros hay que registrarlos en el método AddControllers

------------------------------------------------------------------------------------------------------------
CORS

Para especificar una cors policy que controle a nivel general el tipo de peticiones que se aceptan y desde donde,
simplemente debemos especificar en el Program estas características y emplear el middleware UseCors

------------------------------------------------------------------------------------------------------------
Procedimientos almacenados

Incluir los siguientes procedimientos almacenados agregando consultas a la base de datos

CREATE PROCEDURE Familias_Insertar
                @nombre nvarchar(150),
                @id int OUTPUT
                AS
                BEGIN
                SET NOCOUNT ON;
                INSERT INTO Familias(Nombre)
                VALUES (@nombre);
                SELECT @id = SCOPE_IDENTITY();
                END


CREATE PROCEDURE Familias_ObtenerPorId
                @id int
                AS
                BEGIN
                SET NOCOUNT ON;
                SELECT *
                FROM Familias
                WHERE Id = @id;
                END

En FamiliasController abrimos puntos de acceso (un post y un get) para poder ejecutarlos







